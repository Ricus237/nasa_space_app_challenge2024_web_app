{"version":3,"file":"index-b721bc38.js","sources":["../../src/images/1.jpg","../../src/images/2.jpg","../../src/images/3.jpg","../../src/images/4.jpg","../../src/images/sun.jpg","../../src/images/mercurymap.jpg","../../src/images/mercurybump.jpg","../../src/images/venusmap.jpg","../../src/images/venus_atmosphere.jpg","../../src/images/earth_daymap.jpg","../../src/images/earth_nightmap.jpg","../../src/images/earth_atmosphere.jpg","../../src/images/moonmap.jpg","../../src/images/moonbump.jpg","../../src/images/marsmap.jpg","../../src/images/marsbump.jpg","../../src/images/jupiter.jpg","../../src/images/jupiterIo.jpg","../../src/images/jupiterEuropa.jpg","../../src/images/jupiterGanymede.jpg","../../src/images/jupiterCallisto.jpg","../../src/images/saturnmap.jpg","../../src/images/saturn_ring.png","../../src/images/uranus.jpg","../../src/images/uranus_ring.png","../../src/images/neptune.jpg","../../src/images/plutomap.jpg","../../src/script.js"],"sourcesContent":["export default \"__VITE_ASSET__4c468b3b__\"","export default \"__VITE_ASSET__88a5d4f5__\"","export default \"__VITE_ASSET__da877ea9__\"","export default \"__VITE_ASSET__acf116f0__\"","export default \"__VITE_ASSET__e3687ab9__\"","export default \"__VITE_ASSET__b79fc812__\"","export default \"__VITE_ASSET__6d554ee3__\"","export default \"__VITE_ASSET__f7888110__\"","export default \"__VITE_ASSET__133c0ab0__\"","export default \"__VITE_ASSET__9834b7ce__\"","export default \"__VITE_ASSET__746a494a__\"","export default \"__VITE_ASSET__884dea8a__\"","export default \"__VITE_ASSET__f14bbf71__\"","export default \"__VITE_ASSET__c46444a1__\"","export default \"__VITE_ASSET__d88e5364__\"","export default \"__VITE_ASSET__3071e889__\"","export default \"__VITE_ASSET__7a5d904a__\"","export default \"__VITE_ASSET__a6f5c87a__\"","export default \"__VITE_ASSET__aed9cf0e__\"","export default \"__VITE_ASSET__521bcb97__\"","export default \"__VITE_ASSET__39a6d02b__\"","export default \"__VITE_ASSET__abbcf035__\"","export default \"__VITE_ASSET__42a8a8c3__\"","export default \"__VITE_ASSET__9ac2061e__\"","export default \"__VITE_ASSET__244bca89__\"","export default \"__VITE_ASSET__46460559__\"","export default \"__VITE_ASSET__2ef5dcaf__\"","import * as THREE from 'three';\nimport * as dat from 'dat.gui';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OutlinePass } from 'three/addons/postprocessing/OutlinePass.js';\n\nimport bgTexture1 from '/images/1.jpg';\nimport bgTexture2 from '/images/2.jpg';\nimport bgTexture3 from '/images/3.jpg';\nimport bgTexture4 from '/images/4.jpg';\nimport sunTexture from '/images/sun.jpg';\nimport mercuryTexture from '/images/mercurymap.jpg';\nimport mercuryBump from '/images/mercurybump.jpg';\nimport venusTexture from '/images/venusmap.jpg';\nimport venusBump from '/images/venusmap.jpg';\nimport venusAtmosphere from '/images/venus_atmosphere.jpg';\nimport earthTexture from '/images/earth_daymap.jpg';\nimport earthNightTexture from '/images/earth_nightmap.jpg';\nimport earthAtmosphere from '/images/earth_atmosphere.jpg';\nimport earthMoonTexture from '/images/moonmap.jpg';\nimport earthMoonBump from '/images/moonbump.jpg';\nimport marsTexture from '/images/marsmap.jpg';\nimport marsBump from '/images/marsbump.jpg';\nimport jupiterTexture from '/images/jupiter.jpg';\nimport ioTexture from '/images/jupiterIo.jpg';\nimport europaTexture from '/images/jupiterEuropa.jpg';\nimport ganymedeTexture from '/images/jupiterGanymede.jpg';\nimport callistoTexture from '/images/jupiterCallisto.jpg';\nimport saturnTexture from '/images/saturnmap.jpg';\nimport satRingTexture from '/images/saturn_ring.png';\nimport uranusTexture from '/images/uranus.jpg';\nimport uraRingTexture from '/images/uranus_ring.png';\nimport neptuneTexture from '/images/neptune.jpg';\nimport plutoTexture from '/images/plutomap.jpg';\n\n// ******  SETUP  ******\nconsole.log(\"Create the scene\");\nconst scene = new THREE.Scene();\n\nconsole.log(\"Create a perspective projection camera\");\nvar camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 0.1, 1000 );\ncamera.position.set(-175, 115, 5);\n\nconsole.log(\"Create the renderer\");\nconst renderer = new THREE.WebGL1Renderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\nrenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\nconsole.log(\"Create an orbit control\");\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.75;\ncontrols.screenSpacePanning = false;\n\nconsole.log(\"Set up texture loader\");\nconst cubeTextureLoader = new THREE.CubeTextureLoader();\nconst loadTexture = new THREE.TextureLoader();\n\n// ******  POSTPROCESSING setup ******\nconst composer = new EffectComposer(renderer);\ncomposer.addPass(new RenderPass(scene, camera));\n\n// ******  OUTLINE PASS  ******\nconst outlinePass = new OutlinePass(new THREE.Vector2(window.innerWidth, window.innerHeight), scene, camera);\noutlinePass.edgeStrength = 3;\noutlinePass.edgeGlow = 1;\noutlinePass.visibleEdgeColor.set(0xffffff);\noutlinePass.hiddenEdgeColor.set(0x190a05);\ncomposer.addPass(outlinePass);\n\n// ******  BLOOM PASS  ******\nconst bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1, 0.4, 0.85);\nbloomPass.threshold = 1;\nbloomPass.radius = 0.9;\ncomposer.addPass(bloomPass);\n\n// ****** AMBIENT LIGHT ******\nconsole.log(\"Add the ambient light\");\nvar lightAmbient = new THREE.AmbientLight(0x222222, 6); \nscene.add(lightAmbient);\n\n// ******  Star background  ******\nscene.background = cubeTextureLoader.load([\n\n  bgTexture3,\n  bgTexture1,\n  bgTexture2,\n  bgTexture2,\n  bgTexture4,\n  bgTexture2\n]);\n\n// ******  CONTROLS  ******\nconst gui = new dat.GUI({ autoPlace: false });\nconst customContainer = document.getElementById('gui-container');\ncustomContainer.appendChild(gui.domElement);\n\n// ****** SETTINGS FOR INTERACTIVE CONTROLS  ******\nconst settings = {\n  accelerationOrbit: 1,\n  acceleration: 1,\n  sunIntensity: 1.9\n};\n\ngui.add(settings, 'accelerationOrbit', 0, 10).onChange(value => {\n});\ngui.add(settings, 'acceleration', 0, 10).onChange(value => {\n});\ngui.add(settings, 'sunIntensity', 1, 10).onChange(value => {\n  sunMat.emissiveIntensity = value;\n});\n\n// mouse movement\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\nfunction onMouseMove(event) {\n    event.preventDefault();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n}\n\n// ******  SELECT PLANET  ******\nlet selectedPlanet = null;\nlet isMovingTowardsPlanet = false;\nlet targetCameraPosition = new THREE.Vector3();\nlet offset;\n\nfunction onDocumentMouseDown(event) {\n  event.preventDefault();\n\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, camera);\n  var intersects = raycaster.intersectObjects(raycastTargets);\n\n  if (intersects.length > 0) {\n    const clickedObject = intersects[0].object;\n    selectedPlanet = identifyPlanet(clickedObject);\n    if (selectedPlanet) {\n      closeInfoNoZoomOut();\n      \n      settings.accelerationOrbit = 0; // Stop orbital movement\n\n      // Update camera to look at the selected planet\n      const planetPosition = new THREE.Vector3();\n      selectedPlanet.planet.getWorldPosition(planetPosition);\n      controls.target.copy(planetPosition);\n      camera.lookAt(planetPosition); // Orient the camera towards the planet\n\n      targetCameraPosition.copy(planetPosition).add(camera.position.clone().sub(planetPosition).normalize().multiplyScalar(offset));\n      isMovingTowardsPlanet = true;\n    }\n  }\n}\n\nfunction identifyPlanet(clickedObject) {\n  // Logic to identify which planet was clicked based on the clicked object, different offset for camera distance\n        if (clickedObject.material === mercury.planet.material) {\n          offset = 10;\n          return mercury;\n        } else if (clickedObject.material === venus.Atmosphere.material) {\n          offset = 25;\n          return venus;\n        } else if (clickedObject.material === earth.Atmosphere.material) {\n          offset = 25;\n          return earth;\n        } else if (clickedObject.material === mars.planet.material) {\n          offset = 15;\n          return mars;\n        } else if (clickedObject.material === jupiter.planet.material) {\n          offset = 50;\n          return jupiter;\n        } else if (clickedObject.material === saturn.planet.material) {\n          offset = 50;\n          return saturn;\n        } else if (clickedObject.material === uranus.planet.material) {\n          offset = 25;\n          return uranus;\n        } else if (clickedObject.material === neptune.planet.material) {\n          offset = 20;\n          return neptune;\n        } else if (clickedObject.material === pluto.planet.material) {\n          offset = 10;\n          return pluto;\n        } \n\n  return null;\n}\n\n// ******  SHOW PLANET INFO AFTER SELECTION  ******\nfunction showPlanetInfo(planet) {\n  var info = document.getElementById('planetInfo');\n  var name = document.getElementById('planetName');\n  var details = document.getElementById('planetDetails');\n\n  name.innerText = planet;\n  details.innerText = `Radius: ${planetData[planet].radius}\\nTilt: ${planetData[planet].tilt}\\nRotation: ${planetData[planet].rotation}\\nOrbit: ${planetData[planet].orbit}\\nDistance: ${planetData[planet].distance}\\nMoons: ${planetData[planet].moons}\\nInfo: ${planetData[planet].info}`;\n\n  info.style.display = 'block';\n}\nlet isZoomingOut = false;\nlet zoomOutTargetPosition = new THREE.Vector3(-175, 115, 5);\n// close 'x' button function\nfunction closeInfo() {\n  var info = document.getElementById('planetInfo');\n  info.style.display = 'none';\n  settings.accelerationOrbit = 1;\n  isZoomingOut = true;\n  controls.target.set(0, 0, 0);\n}\nwindow.closeInfo = closeInfo;\n// close info when clicking another planet\nfunction closeInfoNoZoomOut() {\n  var info = document.getElementById('planetInfo');\n  info.style.display = 'none';\n  settings.accelerationOrbit = 1;\n}\n// ******  SUN  ******\nlet sunMat;\n\nconst sunSize = 697/40; // 40 times smaller scale than earth\nconst sunGeom = new THREE.SphereGeometry(sunSize, 32, 20);\nsunMat = new THREE.MeshStandardMaterial({\n  emissive: 0xFFF88F,\n  emissiveMap: loadTexture.load(sunTexture),\n  emissiveIntensity: settings.sunIntensity\n});\nconst sun = new THREE.Mesh(sunGeom, sunMat);\nscene.add(sun);\n\n//point light in the sun\nconst pointLight = new THREE.PointLight(0xFDFFD3 , 1200, 400, 1.4);\nscene.add(pointLight);\n\n\n// ******  PLANET CREATION FUNCTION  ******\nfunction createPlanet(planetName, size, position, tilt, texture, bump, ring, atmosphere, moons){\n\n  let material;\n  if (texture instanceof THREE.Material){\n    material = texture;\n  } \n  else if(bump){\n    material = new THREE.MeshPhongMaterial({\n    map: loadTexture.load(texture),\n    bumpMap: loadTexture.load(bump),\n    bumpScale: 0.7\n    });\n  }\n  else {\n    material = new THREE.MeshPhongMaterial({\n    map: loadTexture.load(texture)\n    });\n  } \n\n  const name = planetName;\n  const geometry = new THREE.SphereGeometry(size, 32, 20);\n  const planet = new THREE.Mesh(geometry, material);\n  const planet3d = new THREE.Object3D;\n  const planetSystem = new THREE.Group();\n  planetSystem.add(planet);\n  let Atmosphere;\n  let Ring;\n  planet.position.x = position;\n  planet.rotation.z = tilt * Math.PI / 180;\n\n  // add orbit path\n  const orbitPath = new THREE.EllipseCurve(\n    0, 0,            // ax, aY\n    position, position, // xRadius, yRadius\n    0, 2 * Math.PI,   // aStartAngle, aEndAngle\n    false,            // aClockwise\n    0                 // aRotation\n);\n\n  const pathPoints = orbitPath.getPoints(100);\n  const orbitGeometry = new THREE.BufferGeometry().setFromPoints(pathPoints);\n  const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0.03 });\n  const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);\n  orbit.rotation.x = Math.PI / 2;\n  planetSystem.add(orbit);\n\n  //add ring\n  if(ring)\n  {\n    const RingGeo = new THREE.RingGeometry(ring.innerRadius, ring.outerRadius,30);\n    const RingMat = new THREE.MeshStandardMaterial({\n      map: loadTexture.load(ring.texture),\n      side: THREE.DoubleSide\n    });\n    Ring = new THREE.Mesh(RingGeo, RingMat);\n    planetSystem.add(Ring);\n    Ring.position.x = position;\n    Ring.rotation.x = -0.5 *Math.PI;\n    Ring.rotation.y = -tilt * Math.PI / 180;\n  }\n  \n  //add atmosphere\n  if(atmosphere){\n    const atmosphereGeom = new THREE.SphereGeometry(size+0.1, 32, 20);\n    const atmosphereMaterial = new THREE.MeshPhongMaterial({\n      map:loadTexture.load(atmosphere),\n      transparent: true,\n      opacity: 0.4,\n      depthTest: true,\n      depthWrite: false\n    })\n    Atmosphere = new THREE.Mesh(atmosphereGeom, atmosphereMaterial)\n    \n    Atmosphere.rotation.z = 0.41;\n    planet.add(Atmosphere);\n  }\n\n  //add moons\n  if(moons){\n    moons.forEach(moon => {\n      let moonMaterial;\n      \n      if(moon.bump){\n        moonMaterial = new THREE.MeshStandardMaterial({\n          map: loadTexture.load(moon.texture),\n          bumpMap: loadTexture.load(moon.bump),\n          bumpScale: 0.5\n        });\n      } else{\n        moonMaterial = new THREE.MeshStandardMaterial({\n          map: loadTexture.load(moon.texture)\n        });\n      }\n      const moonGeometry = new THREE.SphereGeometry(moon.size, 32, 20);\n      const moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);\n      const moonOrbitDistance = size * 1.5;\n      moonMesh.position.set(moonOrbitDistance, 0, 0);\n      planetSystem.add(moonMesh);\n      moon.mesh = moonMesh;\n    });\n  }\n  //add planet system to planet3d object and to the scene\n  planet3d.add(planetSystem);\n  scene.add(planet3d);\n  return {name, planet, planet3d, Atmosphere, moons, planetSystem, Ring};\n}\n\n\n// ******  LOADING OBJECTS METHOD  ******\nfunction loadObject(path, position, scale, callback) {\n  const loader = new GLTFLoader();\n\n  loader.load(path, function (gltf) {\n      const obj = gltf.scene;\n      obj.position.set(position, 0, 0);\n      obj.scale.set(scale, scale, scale);\n      scene.add(obj);\n      if (callback) {\n        callback(obj);\n      }\n  }, undefined, function (error) {\n      console.error('An error happened', error);\n  });\n}\n\n// ******  ASTEROIDS  ******\nconst asteroids = [];\nfunction loadAsteroids(path, numberOfAsteroids, minOrbitRadius, maxOrbitRadius) {\n  const loader = new GLTFLoader();\n  loader.load(path, function (gltf) {\n      gltf.scene.traverse(function (child) {\n          if (child.isMesh) {\n              for (let i = 0; i < numberOfAsteroids / 12; i++) { // Divide by 12 because there are 12 asteroids in the pack\n                  const asteroid = child.clone();\n                  const orbitRadius = THREE.MathUtils.randFloat(minOrbitRadius, maxOrbitRadius);\n                  const angle = Math.random() * Math.PI * 2;\n                  const x = orbitRadius * Math.cos(angle);\n                  const y = 0;\n                  const z = orbitRadius * Math.sin(angle);\n                  child.receiveShadow = true;\n                  asteroid.position.set(x, y, z);\n                  asteroid.scale.setScalar(THREE.MathUtils.randFloat(0.8, 1.2));\n                  scene.add(asteroid);\n                  asteroids.push(asteroid);\n              }\n          }\n      });\n  }, undefined, function (error) {\n      console.error('An error happened', error);\n  });\n}\n\n\n// Earth day/night effect shader material\nconst earthMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    dayTexture: { type: \"t\", value: loadTexture.load(earthTexture) },\n    nightTexture: { type: \"t\", value: loadTexture.load(earthNightTexture) },\n    sunPosition: { type: \"v3\", value: sun.position }\n  },\n  vertexShader: `\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vSunDirection;\n\n    uniform vec3 sunPosition;\n\n    void main() {\n      vUv = uv;\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vNormal = normalize(modelMatrix * vec4(normal, 0.0)).xyz;\n      vSunDirection = normalize(sunPosition - worldPosition.xyz);\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform sampler2D dayTexture;\n    uniform sampler2D nightTexture;\n\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vSunDirection;\n\n    void main() {\n      float intensity = max(dot(vNormal, vSunDirection), 0.0);\n      vec4 dayColor = texture2D(dayTexture, vUv);\n      vec4 nightColor = texture2D(nightTexture, vUv)* 0.2;\n      gl_FragColor = mix(nightColor, dayColor, intensity);\n    }\n  `\n});\n\n\n// ******  MOONS  ******\n// Earth\nconst earthMoon = [{\n  size: 1.6,\n  texture: earthMoonTexture,\n  bump: earthMoonBump,\n  orbitSpeed: 0.001 * settings.accelerationOrbit,\n  orbitRadius: 10\n}]\n\n// Mars' moons with path to 3D models (phobos & deimos)\nconst marsMoons = [\n  {\n    modelPath: '/images/mars/phobos.glb',\n    scale: 0.1,\n    orbitRadius: 5,\n    orbitSpeed: 0.002 * settings.accelerationOrbit,\n    position: 100,\n    mesh: null\n  },\n  {\n    modelPath: '/images/mars/deimos.glb',\n    scale: 0.1,\n    orbitRadius: 9,\n    orbitSpeed: 0.0005 * settings.accelerationOrbit,\n    position: 120,\n    mesh: null\n  }\n];\n\n// Jupiter\nconst jupiterMoons = [\n  {\n    size: 1.6,\n    texture: ioTexture,\n    orbitRadius: 20,\n    orbitSpeed: 0.0005 * settings.accelerationOrbit\n  },\n  {\n    size: 1.4,\n    texture: europaTexture,\n    orbitRadius: 24,\n    orbitSpeed: 0.00025 * settings.accelerationOrbit\n  },\n  {\n    size: 2,\n    texture: ganymedeTexture,\n    orbitRadius: 28,\n    orbitSpeed: 0.000125 * settings.accelerationOrbit\n  },\n  {\n    size: 1.7,\n    texture: callistoTexture,\n    orbitRadius: 32,\n    orbitSpeed: 0.00006 * settings.accelerationOrbit\n  }\n];\n\n// ******  PLANET CREATIONS  ******\nconst mercury = new createPlanet('Mercury', 2.4, 40, 0, mercuryTexture, mercuryBump);\nconst venus = new createPlanet('Venus', 6.1, 65, 3, venusTexture, venusBump, null, venusAtmosphere);\nconst earth = new createPlanet('Earth', 6.4, 90, 23, earthMaterial, null, null, earthAtmosphere, earthMoon);\nconst mars = new createPlanet('Mars', 3.4, 115, 25, marsTexture, marsBump)\n// Load Mars moons\nmarsMoons.forEach(moon => {\n  loadObject(moon.modelPath, moon.position, moon.scale, function(loadedModel) {\n    moon.mesh = loadedModel;\n    mars.planetSystem.add(moon.mesh);\n    moon.mesh.traverse(function (child) {\n      if (child.isMesh) {\n        child.castShadow = true;\n        child.receiveShadow = true;\n      }\n    });\n  });\n});\n\nconst jupiter = new createPlanet('Jupiter', 69/4, 200, 3, jupiterTexture, null, null, null, jupiterMoons);\nconst saturn = new createPlanet('Saturn', 58/4, 270, 26, saturnTexture, null, {\n  innerRadius: 18, \n  outerRadius: 29, \n  texture: satRingTexture\n});\nconst uranus = new createPlanet('Uranus', 25/4, 320, 82, uranusTexture, null, {\n  innerRadius: 6, \n  outerRadius: 8, \n  texture: uraRingTexture\n});\nconst neptune = new createPlanet('Neptune', 24/4, 340, 28, neptuneTexture);\nconst pluto = new createPlanet('Pluto', 1, 350, 57, plutoTexture)\n\n  // ******  PLANETS DATA  ******\n  const planetData = {\n    'Mercury': {\n        radius: '2,439.7 km',\n        tilt: '0.034°',\n        rotation: '58.6 Earth days',\n        orbit: '88 Earth days',\n        distance: '57.9 million km',\n        moons: '0',\n        info: 'The smallest planet in our solar system and nearest to the Sun.'\n    },\n    'Venus': {\n        radius: '6,051.8 km',\n        tilt: '177.4°',\n        rotation: '243 Earth days',\n        orbit: '225 Earth days',\n        distance: '108.2 million km',\n        moons: '0',\n        info: 'Second planet from the Sun, known for its extreme temperatures and thick atmosphere.'\n    },\n    'Earth': {\n        radius: '6,371 km',\n        tilt: '23.5°',\n        rotation: '24 hours',\n        orbit: '365 days',\n        distance: '150 million km',\n        moons: '1 (Moon)',\n        info: 'Third planet from the Sun and the only known planet to harbor life.'\n    },\n    'Mars': {\n        radius: '3,389.5 km',\n        tilt: '25.19°',\n        rotation: '1.03 Earth days',\n        orbit: '687 Earth days',\n        distance: '227.9 million km',\n        moons: '2 (Phobos and Deimos)',\n        info: 'Known as the Red Planet, famous for its reddish appearance and potential for human colonization.'\n    },\n    'Jupiter': {\n        radius: '69,911 km',\n        tilt: '3.13°',\n        rotation: '9.9 hours',\n        orbit: '12 Earth years',\n        distance: '778.5 million km',\n        moons: '95 known moons (Ganymede, Callisto, Europa, Io are the 4 largest)',\n        info: 'The largest planet in our solar system, known for its Great Red Spot.'\n    },\n    'Saturn': {\n        radius: '58,232 km',\n        tilt: '26.73°',\n        rotation: '10.7 hours',\n        orbit: '29.5 Earth years',\n        distance: '1.4 billion km',\n        moons: '146 known moons',\n        info: 'Distinguished by its extensive ring system, the second-largest planet in our solar system.'\n    },\n    'Uranus': {\n        radius: '25,362 km',\n        tilt: '97.77°',\n        rotation: '17.2 hours',\n        orbit: '84 Earth years',\n        distance: '2.9 billion km',\n        moons: '27 known moons',\n        info: 'Known for its unique sideways rotation and pale blue color.'\n    },\n    'Neptune': {\n        radius: '24,622 km',\n        tilt: '28.32°',\n        rotation: '16.1 hours',\n        orbit: '165 Earth years',\n        distance: '4.5 billion km',\n        moons: '14 known moons',\n        info: 'The most distant planet from the Sun in our solar system, known for its deep blue color.'\n    },\n    'Pluto': {\n        radius: '1,188.3 km',\n        tilt: '122.53°',\n        rotation: '6.4 Earth days',\n        orbit: '248 Earth years',\n        distance: '5.9 billion km',\n        moons: '5 (Charon, Styx, Nix, Kerberos, Hydra)',\n        info: 'Originally classified as the ninth planet, Pluto is now considered a dwarf planet.'\n    }\n};\n\n\n// Array of planets and atmospheres for raycasting\nconst raycastTargets = [\n  mercury.planet, venus.planet, venus.Atmosphere, earth.planet, earth.Atmosphere, \n  mars.planet, jupiter.planet, saturn.planet, uranus.planet, neptune.planet, pluto.planet\n];\n\n// ******  SHADOWS  ******\nrenderer.shadowMap.enabled = true;\npointLight.castShadow = true;\n\n//properties for the point light\npointLight.shadow.mapSize.width = 1024;\npointLight.shadow.mapSize.height = 1024;\npointLight.shadow.camera.near = 10;\npointLight.shadow.camera.far = 20;\n\n//casting and receiving shadows\nearth.planet.castShadow = true;\nearth.planet.receiveShadow = true;\nearth.Atmosphere.castShadow = true;\nearth.Atmosphere.receiveShadow = true;\nearth.moons.forEach(moon => {\nmoon.mesh.castShadow = true;\nmoon.mesh.receiveShadow = true;\n});\nmercury.planet.castShadow = true;\nmercury.planet.receiveShadow = true;\nvenus.planet.castShadow = true;\nvenus.planet.receiveShadow = true;\nvenus.Atmosphere.receiveShadow = true;\nmars.planet.castShadow = true;\nmars.planet.receiveShadow = true;\njupiter.planet.castShadow = true;\njupiter.planet.receiveShadow = true;\njupiter.moons.forEach(moon => {\n  moon.mesh.castShadow = true;\n  moon.mesh.receiveShadow = true;\n  });\nsaturn.planet.castShadow = true;\nsaturn.planet.receiveShadow = true;\nsaturn.Ring.receiveShadow = true;\nuranus.planet.receiveShadow = true;\nneptune.planet.receiveShadow = true;\npluto.planet.receiveShadow = true;\n\n\n\n\nfunction animate(){\n\n  //rotating planets around the sun and itself\n  sun.rotateY(0.001 * settings.acceleration);\n  mercury.planet.rotateY(0.001 * settings.acceleration);\n  mercury.planet3d.rotateY(0.004 * settings.accelerationOrbit);\n  venus.planet.rotateY(0.0005 * settings.acceleration)\n  venus.Atmosphere.rotateY(0.0005 * settings.acceleration);\n  venus.planet3d.rotateY(0.0006 * settings.accelerationOrbit);\n  earth.planet.rotateY(0.005 * settings.acceleration);\n  earth.Atmosphere.rotateY(0.001 * settings.acceleration);\n  earth.planet3d.rotateY(0.001 * settings.accelerationOrbit);\n  mars.planet.rotateY(0.01 * settings.acceleration);\n  mars.planet3d.rotateY(0.0007 * settings.accelerationOrbit);\n  jupiter.planet.rotateY(0.005 * settings.acceleration);\n  jupiter.planet3d.rotateY(0.0003 * settings.accelerationOrbit);\n  saturn.planet.rotateY(0.01 * settings.acceleration);\n  saturn.planet3d.rotateY(0.0002 * settings.accelerationOrbit);\n  uranus.planet.rotateY(0.005 * settings.acceleration);\n  uranus.planet3d.rotateY(0.0001 * settings.accelerationOrbit);\n  neptune.planet.rotateY(0.005 * settings.acceleration);\n  neptune.planet3d.rotateY(0.00008 * settings.accelerationOrbit);\n  pluto.planet.rotateY(0.001 * settings.acceleration)\n  pluto.planet3d.rotateY(0.00006 * settings.accelerationOrbit)\n\n// Animate Earth's moon\nif (earth.moons) {\n  earth.moons.forEach(moon => {\n    const time = performance.now();\n    const tiltAngle = 5 * Math.PI / 180;\n\n    const moonX = earth.planet.position.x + moon.orbitRadius * Math.cos(time * moon.orbitSpeed);\n    const moonY = moon.orbitRadius * Math.sin(time * moon.orbitSpeed) * Math.sin(tiltAngle);\n    const moonZ = earth.planet.position.z + moon.orbitRadius * Math.sin(time * moon.orbitSpeed) * Math.cos(tiltAngle);\n\n    moon.mesh.position.set(moonX, moonY, moonZ);\n    moon.mesh.rotateY(0.01);\n  });\n}\n// Animate Mars' moons\nif (marsMoons){\nmarsMoons.forEach(moon => {\n  if (moon.mesh) {\n    const time = performance.now();\n\n    const moonX = mars.planet.position.x + moon.orbitRadius * Math.cos(time * moon.orbitSpeed);\n    const moonY = moon.orbitRadius * Math.sin(time * moon.orbitSpeed);\n    const moonZ = mars.planet.position.z + moon.orbitRadius * Math.sin(time * moon.orbitSpeed);\n\n    moon.mesh.position.set(moonX, moonY, moonZ);\n    moon.mesh.rotateY(0.001);\n  }\n});\n}\n\n// Animate Jupiter's moons\nif (jupiter.moons) {\n  jupiter.moons.forEach(moon => {\n    const time = performance.now();\n    const moonX = jupiter.planet.position.x + moon.orbitRadius * Math.cos(time * moon.orbitSpeed);\n    const moonY = moon.orbitRadius * Math.sin(time * moon.orbitSpeed);\n    const moonZ = jupiter.planet.position.z + moon.orbitRadius * Math.sin(time * moon.orbitSpeed);\n\n    moon.mesh.position.set(moonX, moonY, moonZ);\n    moon.mesh.rotateY(0.01);\n  });\n}\n\n// Rotate asteroids\nasteroids.forEach(asteroid => {\n  asteroid.rotation.y += 0.0001;\n  asteroid.position.x = asteroid.position.x * Math.cos(0.0001 * settings.accelerationOrbit) + asteroid.position.z * Math.sin(0.0001 * settings.accelerationOrbit);\n  asteroid.position.z = asteroid.position.z * Math.cos(0.0001 * settings.accelerationOrbit) - asteroid.position.x * Math.sin(0.0001 * settings.accelerationOrbit);\n});\n\n// ****** OUTLINES ON PLANETS ******\nraycaster.setFromCamera(mouse, camera);\n\n// Check for intersections\nvar intersects = raycaster.intersectObjects(raycastTargets);\n\n// Reset all outlines\noutlinePass.selectedObjects = [];\n\nif (intersects.length > 0) {\n  const intersectedObject = intersects[0].object;\n\n  // If the intersected object is an atmosphere, find the corresponding planet\n  if (intersectedObject === earth.Atmosphere) {\n    outlinePass.selectedObjects = [earth.planet];\n  } else if (intersectedObject === venus.Atmosphere) {\n    outlinePass.selectedObjects = [venus.planet];\n  } else {\n    // For other planets, outline the intersected object itself\n    outlinePass.selectedObjects = [intersectedObject];\n  }\n}\n// ******  ZOOM IN/OUT  ******\nif (isMovingTowardsPlanet) {\n  // Smoothly move the camera towards the target position\n  camera.position.lerp(targetCameraPosition, 0.03);\n\n  // Check if the camera is close to the target position\n  if (camera.position.distanceTo(targetCameraPosition) < 1) {\n      isMovingTowardsPlanet = false;\n      showPlanetInfo(selectedPlanet.name);\n\n  }\n} else if (isZoomingOut) {\n  camera.position.lerp(zoomOutTargetPosition, 0.05);\n\n  if (camera.position.distanceTo(zoomOutTargetPosition) < 1) {\n      isZoomingOut = false;\n  }\n}\n\n  controls.update();\n  requestAnimationFrame(animate);\n  composer.render();\n}\nloadAsteroids('/asteroids/asteroidPack.glb', 1000, 130, 160);\nloadAsteroids('/asteroids/asteroidPack.glb', 3000, 352, 370);\nanimate();\n\nwindow.addEventListener('mousemove', onMouseMove, false);\nwindow.addEventListener('mousedown', onDocumentMouseDown, false);\nwindow.addEventListener('resize', function(){\n  camera.aspect = window.innerWidth/window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth,window.innerHeight);\n  composer.setSize(window.innerWidth,window.innerHeight);\n});\n"],"names":["bgTexture1","bgTexture2","bgTexture3","bgTexture4","sunTexture","mercuryTexture","mercuryBump","venusBump","venusAtmosphere","earthTexture","earthNightTexture","earthAtmosphere","earthMoonTexture","earthMoonBump","marsTexture","marsBump","jupiterTexture","ioTexture","europaTexture","ganymedeTexture","callistoTexture","saturnTexture","satRingTexture","uranusTexture","uraRingTexture","neptuneTexture","plutoTexture","scene","THREE.Scene","camera","THREE.PerspectiveCamera","renderer","THREE.WebGL1Renderer","THREE.ACESFilmicToneMapping","controls","OrbitControls","cubeTextureLoader","THREE.CubeTextureLoader","loadTexture","THREE.TextureLoader","composer","EffectComposer","RenderPass","outlinePass","OutlinePass","THREE.Vector2","bloomPass","UnrealBloomPass","lightAmbient","THREE.AmbientLight","gui","dat.GUI","customContainer","settings","value","sunMat","raycaster","THREE.Raycaster","mouse","onMouseMove","event","selectedPlanet","isMovingTowardsPlanet","targetCameraPosition","THREE.Vector3","offset","onDocumentMouseDown","intersects","raycastTargets","clickedObject","identifyPlanet","closeInfoNoZoomOut","planetPosition","mercury","venus","earth","mars","jupiter","saturn","uranus","neptune","pluto","showPlanetInfo","planet","info","name","details","planetData","isZoomingOut","zoomOutTargetPosition","closeInfo","sunSize","sunGeom","THREE.SphereGeometry","THREE.MeshStandardMaterial","sun","THREE.Mesh","pointLight","THREE.PointLight","createPlanet","planetName","size","position","tilt","texture","bump","ring","atmosphere","moons","material","THREE.Material","THREE.MeshPhongMaterial","geometry","planet3d","THREE.Object3D","planetSystem","THREE.Group","Atmosphere","Ring","pathPoints","THREE.EllipseCurve","orbitGeometry","THREE.BufferGeometry","orbitMaterial","THREE.LineBasicMaterial","orbit","THREE.LineLoop","RingGeo","THREE.RingGeometry","RingMat","THREE.DoubleSide","atmosphereGeom","atmosphereMaterial","moon","moonMaterial","moonGeometry","moonMesh","moonOrbitDistance","loadObject","path","scale","callback","GLTFLoader","gltf","obj","error","asteroids","loadAsteroids","numberOfAsteroids","minOrbitRadius","maxOrbitRadius","child","i","asteroid","orbitRadius","THREE.MathUtils","angle","x","y","z","earthMaterial","THREE.ShaderMaterial","earthMoon","marsMoons","jupiterMoons","venusTexture","loadedModel","animate","time","tiltAngle","moonX","moonY","moonZ","intersectedObject"],"mappings":"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"}